@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Cansat_Dashboard.ApiService
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<h1>Cansat Dashboard</h1>

<div class="container">
    <div class="row">
        <div class="col-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Status</h5>
                    <p>Connection: @(IsConnected ? "Connected" : "Disconnected")</p>
                </div>
            </div>
            <div class="card mt-2">
                <div class="card-body">
                    <h5 class="card-title">General</h5>
                    <p>@lastTelemetry?.State</p>
                    <p>@lastTelemetry?.Mode</p>
                    <p>@lastTelemetry?.MissionTime</p>
                </div>
            </div>
            <div class="card mt-2">
                <div class="card-body">
                    <h5 class="card-title">GPS</h5>
                    <p>@lastTelemetry?.GpsTime</p>
                    <p>@lastTelemetry?.GpsLatitude</p>
                    <p>@lastTelemetry?.GpsLongitude</p>
                    <p>@lastTelemetry?.GpsAltitude</p>
                    <p>@lastTelemetry?.GpsSats</p>
                </div>
            </div>
        </div>
        <div class="col-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Graphs</h5>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private List<CanSatData> telemetries = new();
    private CanSatData? lastTelemetry => telemetries.LastOrDefault();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5458/dashboardhub")
            .Build();

        hubConnection.On<CanSatData>("ReceiveTelemetry", (data) =>
        {
            telemetries.Add(data);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}