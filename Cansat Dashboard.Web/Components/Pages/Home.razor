@page "/"
@using Cansat_Dashboard.Web.Components
@using Cansat_Dashboard.Shared
@inject DashboardState State
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Cansat Dashboard</PageTitle>

<div class="dashboard-grid">
    <div class="data-card" id="temperature-card">
        <h4>Temperature</h4>
        <p>@(State.Data.LastOrDefault()?.Temperature.ToString("F1") ?? "---")°C</p>
    </div>
    
    <div class="data-card" id="pressure-card">
        <h4>Pressure</h4>
        <p>@(State.Data.LastOrDefault()?.Pressure.ToString("F0") ?? "---") hPa</p>
    </div>
    
    <div class="data-card" id="humidity-card">
        <h4>Humidity</h4>
        <p>@(State.Data.LastOrDefault()?.Humidity.ToString("F0") ?? "---")%</p>
    </div>
    
    <div class="data-card" id="satellite-card">
        <h4>GPS Satellites</h4>
        <p>@(State.Data.LastOrDefault()?.GpsSatellites.ToString() ?? "---")</p>
    </div>
    
    <div id="visualization-wrapper">
        <div class="dark-container" style="height: 100%;">
            <div id="model-container" style="width: 100%; height: 100%;"></div>
        </div>
    </div>
    
    <div id="live-output-wrapper">
        <div id="live-output"></div>
        <input type="text" id="command-input" placeholder="Enter command..." />
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        State.OnChange += HandleStateChanged;
        if (State.Data.Count == 0)
        {
            await State.Init();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("init3DModel");
        }
    }

    private Task HandleStateChanged()
    {
        var lastData = State.Data.LastOrDefault();
        if (lastData != null)
        {
            JSRuntime.InvokeVoidAsync("updateRotation", lastData.Pitch, lastData.Roll, lastData.Yaw);
        }
        return InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        State.OnChange -= HandleStateChanged;
    }
}