@page "/"
@using Cansat_Dashboard.Web.Components
@using Cansat_Dashboard.Shared
@inject DashboardState State
@implements IDisposable

<PageTitle>Cansat Dashboard</PageTitle>

<h1>Cansat Dashboard</h1>

<p>Status: @(State.IsConnected ? "Connected" : "Disconnected (Using Mock Data)")</p>

@if (State.Data.Count == 0)
{
    <p><em>Waiting for data...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Packet</th>
                <th>State</th>
                <th>Temperature (°C)</th>
                <th>Pressure (hPa)</th>
                <th>Altitude (m)</th>
                <th>Voltage (V)</th>
                <th>GPS Sats</th>
                <th>Lat / Lon</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in State.Data.OrderByDescending(d => d.PacketCount).Take(20))
            {
                <tr>
                    <td>@data.PacketCount</td>
                    <td>@data.MissionState</td>
                    <td>@data.Temperature.ToString("F2")</td>
                    <td>@data.Pressure.ToString("F1")</td>
                    <td>@data.GpsAltitude.ToString("F1")</td>
                    <td>@data.BatteryVoltage.ToString("F2")</td>
                    <td>@data.GpsSatellites</td>
                    <td>@data.GpsLatitude.ToString("F4"), @data.GpsLongitude.ToString("F4")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        State.OnChange += HandleStateChanged;
        // Check if Init has already been run to avoid re-initializing on hot reload
        if (State.Data.Count == 0)
        {
            await State.Init();
        }
    }

    private Task HandleStateChanged()
    {
        return InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnChange -= HandleStateChanged;
    }
}